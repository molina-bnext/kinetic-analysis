{"kind":"Notebook","sha256":"40c726f3440c122b2285c24eddde5efd446126992c2746f44f91c271045b66d8","slug":"cytosol-kinetics","location":"/cytosol-kinetics.ipynb","dependencies":[],"frontmatter":{"title":"Preamble","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"python3 (default)","language":"python"},"exports":[{"format":"ipynb","filename":"cytosol-kinetics.ipynb","url":"/cytosol-kinetics-214e45a1bab91b702f1f9077c553b063.ipynb"}]},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"import io\nimport re\nimport glob\nimport datetime\nfrom functools import partial\n\nimport numpy as np\nimport pandas as pd\nfrom scipy.optimize import curve_fit\n\n\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport seaborn as sns","key":"bGHKGOrU3h"},{"type":"output","id":"FeCF24ZLAtLW8eBhjdXF0","data":[],"key":"shD6Tgdt9V"}],"key":"bvxcEcjxhG"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Load Platemap","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BfqkXIkd03"}],"identifier":"load-platemap","label":"Load Platemap","html_id":"load-platemap","implicit":true,"key":"KJXjCvCqRP"}],"key":"lVN8OblyOU"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"def read_platemap_tsv(platemap_path: str) -> pd.DataFrame:\n    platemap = pd.read_table(platemap_path)\n\n    platemap[\"Row\"] = platemap[\"Well\"].apply(lambda s: re.search(r\"[A-Z]\", s).group())\n    platemap[\"Column\"] = platemap[\"Well\"].apply(lambda s: int(re.search(r\"\\d+\", s).group()))\n    platemap[\"Column\"] = platemap[\"Column\"].astype(int)\n\n    return platemap\n\ndef read_platemap_str(platemap_str: str) -> pd.DataFrame:\n    platemap = pd.read_table(io.StringIO(platemap_str), index_col=0)\n    print(platemap)\n    platemap.index.name = \"Row\"\n    platemap = platemap.reset_index().melt(id_vars=[\"Row\"], var_name=\"Column\", value_name=\"Construct\")\n    \n    platemap[\"Column\"] = platemap[\"Column\"].astype(int)\n    platemap[\"Well\"] = platemap.apply(lambda well: f\"{well['Row']}:{well['Column']}\", axis=1)\n    platemap = platemap.rename(columns={\"Construct\": \"Label\"})\n    platemap = platemap.dropna()\n    return platemap\n\ndef read_platemap_excel(platemap_path: str) -> pd.DataFrame:\n    \"\"\"\n    Use like this:\n\n    \n    > platemap_path = \"bnext/experiments/20240703-PURE-pT7deGFP-tetR-lacI/20240703-PURE-validate-pT7-deGFP-tetR-lacI.xlsx\"\n    > platemap = read_platemap_excel(platemap_path)\n    > platemap.head()\n    \"\"\"\n    platemap = pd.read_excel(platemap_path)\n    platemap.fillna(value=0, inplace=True)\n    platemap['Row'] = platemap['Well'].apply(lambda s: s.split(\":\")[0])\n    platemap['Column'] = platemap['Well'].apply(lambda s: s.split(\":\")[1]).astype(int)\n\n    return platemap","key":"QDzUtaHfTC"},{"type":"output","id":"EufyF3B-iYKec9Xh4Yx8B","data":[],"key":"uLBbug3c14"}],"key":"Ez1upFd6eB"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# LOAD YOUR PLATEMAP HERE\"\nplatemap_path = \"./sample-data/platemap.txt\"\nplatemap = read_platemap_tsv(platemap_path)\nplatemap.head()","key":"l0MleTGS4U"},{"type":"output","id":"dpcYjCe3g00yL_pR7zJ-f","data":[{"output_type":"execute_result","execution_count":3,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Well</th>\n      <th>Experiment</th>\n      <th>Label</th>\n      <th>DNA Template</th>\n      <th>[DNA Template] (ng/uL)</th>\n      <th>Blank</th>\n      <th>Row</th>\n      <th>Column</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>B1</td>\n      <td>DNA Concentration</td>\n      <td>GFP-100</td>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>100.0</td>\n      <td>NaN</td>\n      <td>B</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>B2</td>\n      <td>DNA Concentration</td>\n      <td>GFP-50</td>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>50.0</td>\n      <td>NaN</td>\n      <td>B</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>B3</td>\n      <td>DNA Concentration</td>\n      <td>GFP-20</td>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>20.0</td>\n      <td>NaN</td>\n      <td>B</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>B4</td>\n      <td>DNA Concentration</td>\n      <td>GFP-10</td>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>10.0</td>\n      <td>NaN</td>\n      <td>B</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>B5</td>\n      <td>DNA Concentration</td>\n      <td>GFP-5</td>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>5.0</td>\n      <td>NaN</td>\n      <td>B</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"},"text/plain":{"content":"  Well         Experiment    Label       DNA Template  [DNA Template] (ng/uL)  \\\n0   B1  DNA Concentration  GFP-100  pT7-deGFP (AR-11)                   100.0   \n1   B2  DNA Concentration   GFP-50  pT7-deGFP (AR-11)                    50.0   \n2   B3  DNA Concentration   GFP-20  pT7-deGFP (AR-11)                    20.0   \n3   B4  DNA Concentration   GFP-10  pT7-deGFP (AR-11)                    10.0   \n4   B5  DNA Concentration    GFP-5  pT7-deGFP (AR-11)                     5.0   \n\n  Blank Row  Column  \n0   NaN   B       1  \n1   NaN   B       2  \n2   NaN   B       3  \n3   NaN   B       4  \n4   NaN   B       5  ","content_type":"text/plain"}}}],"key":"RnMsYR94by"}],"key":"JVg732MqrO"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Parse Data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"v92su85683"}],"identifier":"parse-data","label":"Parse Data","html_id":"parse-data","implicit":true,"key":"t18ciEVy1u"}],"key":"HQ6rx2ayWM"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Cytation","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tkbE1Og8lX"}],"identifier":"cytation","label":"Cytation","html_id":"cytation","implicit":true,"key":"MN2t6t2OgM"}],"key":"SWUnucRpnD"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"def read_cytation(\n    datafile: str,\n    platemap: pd.DataFrame, \n    sep: str =\"\\t\",\n    blanklabel: str = \"Blank\",\n) -> pd.DataFrame:\n    # read data file as long string\n    data = \"\"\n    with open(datafile, \"r\", encoding=\"latin1\") as file:\n        data = file.read()\n\n    # extract indices for Proc Details, Layout\n    procidx = re.search(r\"Procedure Details\", data)\n    layoutidx = re.search(r\"Layout\", data)\n    readidx = re.search(r\"^(Read\\s)?\\d+,\\d+\", data, re.MULTILINE)\n\n    # get header DataFrame\n    header = data[:procidx.start()]\n    header = pd.read_csv(\n        io.StringIO(header), \n        delimiter=sep, \n        header=0, names=[\"key\", \"value\"]\n    )\n\n    # get procedure DataFrame\n    procedure = data[procidx.end():layoutidx.start()]  \n    procedure = pd.read_csv(io.StringIO(procedure), skipinitialspace=True, names=range(4))\n    procedure = procedure.replace(np.nan, \"\")\n\n    # get Cytation plate map from datafile as DataFrame\n    layout = data[layoutidx.end():readidx.start()]\n    layout = pd.read_csv(io.StringIO(layout), index_col=False)\n    layout = layout.set_index(layout.columns[0])\n    layout.index.name = \"Row\"\n\n    # iterate over data string to find individual reads\n    reads = dict()\n    \n    sep = r\"(?:Read\\s\\d+:)?(?:\\s\\d{3},\\d{3}(?:\\[\\d\\])?)?\" + sep\n        \n    for readidx in re.finditer(r\"^(Read\\s)?\\d+,\\d+.*\\n\", data, re.MULTILINE):\n        # for each iteration, extract string from start idx to end icx\n        read = data[readidx.end():]\n        read = read[:re.search(r\"(^(Read\\s)?\\d+,\\d+|^Blank Read\\s\\d|Results|Max V|\\Z)\", read[1:], re.MULTILINE).start()]\n        read = pd.read_csv(io.StringIO(read), sep=sep, engine=\"python\")\n        reads[data[readidx.start():readidx.end()].strip()] = read\n\n    # create a DataFrame for each read and process, then concatenate into a large DataFrame\n    read_dataframes = list()\n    for name, r in reads.items():\n        # filter out Cytation calculated kinetic parameters, which are cool, but don't want rn\n        r = r[r.Time.str.contains(\"\\d:\\d{2}:\\d{2}\", regex=True)]\n        \n        # extract meaningful parameters from really big string\n        r = r.melt(id_vars=[\"Time\", \"TÂ°\"], var_name=\"Well\", value_name=\"Data\")\n        r['Row'] = r['Well'].str.extract(r\"([A-Z]+)\")\n        r['Column'] = r['Well'].str.extract(r\"(\\d+)\").astype(int)\n        r['Data'] = r['Data'].replace(\"OVRFLW\", np.nan)\n        r['Data'] = r['Data'].astype(float)\n        r['Read'] = name\n        r['Ex'] = r['Read'].str.extract(r\"(\\d+),\\d+\").astype(int)\n        r['Em'] = r['Read'].str.extract(r\"\\d+,(\\d+)\").astype(int)\n        read_dataframes.append(r)\n\n    data = pd.concat(read_dataframes)\n\n    # add time column to data DataFrame\n    data['Time'] = pd.to_timedelta(data['Time']).astype('timedelta64[s]')\n    data['Seconds'] = data['Time'].map(lambda x: x.total_seconds())\n    data = data.merge(platemap, on=[\"Well\", \"Row\", \"Column\"])\n    data.rename(columns={\"Well_x\": \"Well\"}, inplace=True)\n    \n    # apply blanking, if blanklabel given\n    if blanklabel and blanklabel in data.columns:\n        blanks = data[data['Blank'].notna()].groupby([\"Experiment\", \"Read\", \"Time\"]).agg({\"Data\": \"mean\"}).reset_index()\n        data = data.merge(blanks, on=[\"Experiment\", \"Read\", \"Time\"], suffixes=(\"\", \"Blank\"), how=\"left\")\n        data['DataBlanked'] = data['Data'] - data['DataBlank']\n    \n    return data","key":"WyYQqlEjwC"},{"type":"output","id":"GitBV9GbPlUi8ORSxUpiz","data":[],"key":"l1MRcoSBBD"}],"key":"sB8wQ1jCTW"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"data = read_cytation(\n    datafile=\"./sample-data/pure-dna-sweep.txt\",\n    platemap=platemap,\n)\ndata.head()","key":"DFfNkqDRxM"},{"type":"output","id":"OKHvYli74lM1IxnTkkHsm","data":[{"output_type":"execute_result","execution_count":5,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Time</th>\n      <th>TÂ°</th>\n      <th>Well</th>\n      <th>Data</th>\n      <th>Row</th>\n      <th>Column</th>\n      <th>Read</th>\n      <th>Ex</th>\n      <th>Em</th>\n      <th>Seconds</th>\n      <th>Experiment</th>\n      <th>Label</th>\n      <th>DNA Template</th>\n      <th>[DNA Template] (ng/uL)</th>\n      <th>Blank</th>\n      <th>DataBlank</th>\n      <th>DataBlanked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0 days 00:00:00</td>\n      <td>37.0</td>\n      <td>B1</td>\n      <td>289.0</td>\n      <td>B</td>\n      <td>1</td>\n      <td>490,520</td>\n      <td>490</td>\n      <td>520</td>\n      <td>0.0</td>\n      <td>DNA Concentration</td>\n      <td>GFP-100</td>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>100.0</td>\n      <td>NaN</td>\n      <td>258.0</td>\n      <td>31.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0 days 00:05:00</td>\n      <td>37.1</td>\n      <td>B1</td>\n      <td>312.0</td>\n      <td>B</td>\n      <td>1</td>\n      <td>490,520</td>\n      <td>490</td>\n      <td>520</td>\n      <td>300.0</td>\n      <td>DNA Concentration</td>\n      <td>GFP-100</td>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>100.0</td>\n      <td>NaN</td>\n      <td>247.0</td>\n      <td>65.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0 days 00:10:00</td>\n      <td>37.0</td>\n      <td>B1</td>\n      <td>449.0</td>\n      <td>B</td>\n      <td>1</td>\n      <td>490,520</td>\n      <td>490</td>\n      <td>520</td>\n      <td>600.0</td>\n      <td>DNA Concentration</td>\n      <td>GFP-100</td>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>100.0</td>\n      <td>NaN</td>\n      <td>253.0</td>\n      <td>196.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0 days 00:15:00</td>\n      <td>37.0</td>\n      <td>B1</td>\n      <td>982.0</td>\n      <td>B</td>\n      <td>1</td>\n      <td>490,520</td>\n      <td>490</td>\n      <td>520</td>\n      <td>900.0</td>\n      <td>DNA Concentration</td>\n      <td>GFP-100</td>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>100.0</td>\n      <td>NaN</td>\n      <td>246.0</td>\n      <td>736.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0 days 00:20:00</td>\n      <td>37.0</td>\n      <td>B1</td>\n      <td>1880.0</td>\n      <td>B</td>\n      <td>1</td>\n      <td>490,520</td>\n      <td>490</td>\n      <td>520</td>\n      <td>1200.0</td>\n      <td>DNA Concentration</td>\n      <td>GFP-100</td>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>100.0</td>\n      <td>NaN</td>\n      <td>243.0</td>\n      <td>1637.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"},"text/plain":{"content":"             Time    TÂ° Well    Data Row  Column     Read   Ex   Em  Seconds  \\\n0 0 days 00:00:00  37.0   B1   289.0   B       1  490,520  490  520      0.0   \n1 0 days 00:05:00  37.1   B1   312.0   B       1  490,520  490  520    300.0   \n2 0 days 00:10:00  37.0   B1   449.0   B       1  490,520  490  520    600.0   \n3 0 days 00:15:00  37.0   B1   982.0   B       1  490,520  490  520    900.0   \n4 0 days 00:20:00  37.0   B1  1880.0   B       1  490,520  490  520   1200.0   \n\n          Experiment    Label       DNA Template  [DNA Template] (ng/uL)  \\\n0  DNA Concentration  GFP-100  pT7-deGFP (AR-11)                   100.0   \n1  DNA Concentration  GFP-100  pT7-deGFP (AR-11)                   100.0   \n2  DNA Concentration  GFP-100  pT7-deGFP (AR-11)                   100.0   \n3  DNA Concentration  GFP-100  pT7-deGFP (AR-11)                   100.0   \n4  DNA Concentration  GFP-100  pT7-deGFP (AR-11)                   100.0   \n\n  Blank  DataBlank  DataBlanked  \n0   NaN      258.0         31.0  \n1   NaN      247.0         65.0  \n2   NaN      253.0        196.0  \n3   NaN      246.0        736.0  \n4   NaN      243.0       1637.0  ","content_type":"text/plain"}}}],"key":"QbiLMfp9hb"}],"key":"boCM5iYPtn"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Analysis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"d7K9zCf3mC"}],"identifier":"analysis","label":"Analysis","html_id":"analysis","implicit":true,"key":"jNZpuRpXoP"}],"key":"KpCC8HkE1D"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Basic Plots","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hjMHJs955A"}],"identifier":"basic-plots","label":"Basic Plots","html_id":"basic-plots","implicit":true,"key":"stGz4YT7rc"},{"type":"heading","depth":4,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Plot all wells","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"gwTWD96Ofc"}],"identifier":"plot-all-wells","label":"Plot all wells","html_id":"plot-all-wells","implicit":true,"key":"CfY0FNpdqQ"}],"key":"AqNS0FeRfw"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"plt = sns.relplot(\n    data=data,\n    x=\"Seconds\",\n    y=\"Data\",\n    hue=\"Well\",\n    row=\"Row\",\n    col=\"Column\",\n    kind=\"line\"\n)","key":"EjJQq5yX0G"},{"type":"output","id":"5oYUBeJxEI6d2ee0lEhjx","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"493208ec65af76ff7d667fc8205fc873","path":"/493208ec65af76ff7d667fc8205fc873.png"},"text/plain":{"content":"<Figure size 4068.62x1000 with 16 Axes>","content_type":"text/plain"}}}],"key":"GA3W2KQtEX"}],"key":"N5LzD7w6id"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"DNA Concentration Sweep","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NEYYJppxcd"}],"identifier":"dna-concentration-sweep","label":"DNA Concentration Sweep","html_id":"dna-concentration-sweep","implicit":true,"key":"qts7zrjnZI"}],"key":"yYhgIGg9UW"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"data_concentration = data[data[\"Experiment\"] == \"DNA Concentration\"]","key":"jLlLFTxBq0"},{"type":"output","id":"YH1v3DtRydAP-L072dIOo","data":[],"key":"alh9i3KtcZ"}],"key":"w69QpgXtaH"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"g = sns.relplot(\n    data=data_concentration,\n    x=\"Seconds\",\n    y=\"DataBlanked\",\n    hue=\"[DNA Template] (ng/uL)\",\n    col=\"DNA Template\",\n    kind=\"line\"\n)\n\ng.set_ylabels(\"Fluorescence (RFU)\")","key":"pErSRFJIXA"},{"type":"output","id":"aVBw6-UL66HEZ1wAh_Hhc","data":[{"output_type":"execute_result","execution_count":9,"metadata":{},"data":{"text/plain":{"content":"<seaborn.axisgrid.FacetGrid at 0x326607a90>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"16ef33941dd64bf91cb246cae33fc77c","path":"/16ef33941dd64bf91cb246cae33fc77c.png"},"text/plain":{"content":"<Figure size 674.736x500 with 1 Axes>","content_type":"text/plain"}}}],"key":"rc2yACi4zi"}],"key":"w4kOr7Q2V4"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Kinetics","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qq5F627zas"}],"identifier":"kinetics","label":"Kinetics","html_id":"kinetics","implicit":true,"key":"g8mLAjnG9t"}],"key":"KxzjucuyL8"},{"type":"block","kind":"notebook-code","data":{"editable":true,"slideshow":{"slide_type":""},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"def sigmoid(x, L, k, x0):\n    return (L / (1 + np.exp(-k*(x-x0))))\n\ndef kinetic_analysis_per_well(\n    data: pd.DataFrame, \n    data_column=\"Data\"\n) -> pd.DataFrame:\n    \n    # make initial guesses for parameters\n    L_initial = np.max(data[data_column])\n    x0_initial = np.max(data[\"Seconds\"]) / 4\n    k_initial = (np.log(L_initial * 1.1 / data[data_column] - 1) / (data[\"Seconds\"] - x0_initial)).dropna().mean() * -1.0\n    p0 = [L_initial, k_initial, x0_initial]\n\n    # attempt fitting\n    try:\n        params, _ = curve_fit(sigmoid, data[\"Seconds\"], data[data_column], p0=p0)\n\n        # Get the fitted curve\n        x_fit = data[\"Seconds\"]\n        y_fit = sigmoid(x_fit, *params)\n\n        # calculate velocities and velocity params\n        v = data[data_column].diff(3) / data[\"Seconds\"].diff(3)\n        maxV = v.max()\n        maxV_d = data.loc[v.idxmax(), data_column]\n        maxV_s = data.loc[v.idxmax(), \"Seconds\"]\n\n        # calculate lag time\n        lag = -maxV_d / maxV + maxV_s\n\n        decile_upper = data[data_column].quantile(0.95)\n        decile_lower = data[data_column].quantile(0.05)\n\n        growth_s = (decile_upper - maxV_d) / maxV + maxV_s\n\n        ss_s = data.loc[(data[data_column] > decile_upper).idxmax(), \"Seconds\"]\n        ss_d = data.loc[(data[data_column] > decile_upper).idxmax():, data_column].mean()\n\n        kinetics = {\n            f\"{data_column}_fit_d\": y_fit,\n            f\"{data_column}_maxV\": maxV,\n            f\"{data_column}_maxV_s\": maxV_s,\n            f\"{data_column}_maxV_d\": maxV_d,\n            f\"{data_column}_lag_s\": lag,\n            f\"{data_column}_growth_s\": growth_s,\n            f\"{data_column}_ss_s\": ss_s,\n            f\"{data_column}_ss_d\": ss_d,\n            f\"{data_column}_low_d\": decile_lower,\n            f\"{data_column}_high_d\": decile_upper,\n        }\n\n        return pd.concat([data, pd.DataFrame(kinetics)], axis=1) \n        # return kinetics\n\n    # if Exception raised, exit gracefully(ish)\n    except Exception as e:\n        print(f\"Failed to solve:\")\n        print(e)\n        \n        return None\n\ndef kinetic_analysis(\n    data: pd.DataFrame, \n    data_column=\"Data\",\n    time_cutoff: int = 12000\n) -> pd.DataFrame:\n    \n    tk = (\n        data[(data[\"Seconds\"] < time_cutoff) & (data[\"Blank\"].isna())]\n        .groupby([\"Well\"])\n        .apply(\n            partial(kinetic_analysis_per_well, data_column=data_column)\n        )\n        .reset_index(drop=True)\n    )\n    return tk\n\ndef kinetic_analysis_summary(\n    data: pd.DataFrame,\n    data_column=\"Data\",\n    time_cutoff: int = 12000,\n    label_order: list[str] = None,\n):\n    def per_well_cleanup(df):\n        cols = df.columns\n        return df[[\"Well\"] + list(cols[27:])].aggregate(lambda x: x.iloc[0])\n        \n    tk = kinetic_analysis(data=data, data_column=data_column, time_cutoff=time_cutoff)\n    out = tk.groupby(\"Well\").apply(per_well_cleanup).reset_index(drop=True)\n\n    if label_order:\n        out = out.set_index(\"Well\").reindex(label_order).reset_index()\n    \n    return out\n\ndef plot_kinetics(\n    data: pd.DataFrame, \n    x: str =\"Seconds\", y: str =\"Data\", \n    show_fit: bool = False, show_velocity: bool = False, annotate: bool = False, \n    **kwargs\n):\n    \"\"\"\n    Typical usage:\n    \n    > tk = kinetic_analysis(data=data, data_column=\"BackgroundSubtracted\")\n    > g = sns.FacetGrid(tk, col=\"Well\", col_wrap=2, sharey=False, height=4, aspect=1.5)\n    > g.map_dataframe(plot_kinetics, show_fit=True, show_velocity=True)\n    \"\"\"\n    colors = sns.color_palette(\"Set2\")\n\n    summary = data.iloc[0]\n    \n    ax = sns.scatterplot(\n        data=data, \n        x=x, \n        y=y,\n        alpha=0.5\n    )\n\n    ax_ylim = ax.get_ylim() # Use this to run lines to bounds later, then restore them before returning.\n\n    if show_fit:\n        sns.lineplot(\n            data = data,\n            x = x,\n            y = y,\n            linestyle = \"--\",\n            c = \"red\",\n            alpha=0.5\n        )\n\n    # Max Velocity\n    maxV_x = np.linspace(data[x].min(), data[x].max(), 100)\n    maxV_y = summary[f\"{y}_maxV\"] * (maxV_x - summary[f\"{y}_maxV_s\"]) + summary[f\"{y}_maxV_d\"]\n\n    sns.lineplot(\n        x = maxV_x[(maxV_y > 0) & (maxV_y < data[y].max())],\n        y = maxV_y[(maxV_y > 0) & (maxV_y < data[y].max())],\n        linestyle=\"--\",\n        c=\"r\",\n        ax=ax\n    )\n\n    maxV = summary[f\"{y}_maxV\"]\n    maxV_s = summary[f\"{y}_maxV_s\"]\n    maxV_d = summary[f\"{y}_maxV_d\"]\n\n    # Lag Time\n    lag = summary[f\"{y}_lag_s\"]\n    decile_upper = summary[f\"{y}_high_d\"]\n    decile_lower = summary[f\"{y}_low_d\"]\n    ax.vlines(lag, ymin=ax_ylim[0], ymax=decile_lower, colors=colors[2], linestyle=\"--\")\n\n    # Time to Steady State\n    ss_s = summary[f\"{y}_ss_s\"]\n    ax.axvline(ss_s, c=colors[3], linestyle=\"--\")\n\n    # Range\n    ax.axhline(decile_upper, c=colors[7], linestyle=\"--\")\n    ax.axhline(decile_lower, c=colors[7], linestyle=\"--\")\n\n    if annotate:\n        # Plot the text annotations on the chart\n        ax.annotate(f\"$V_{{max}} = {maxV:.2f} u/s$\", (maxV_s, maxV_d), xytext=(24,0), textcoords=\"offset points\", arrowprops={\"arrowstyle\": \"->\"}, ha=\"left\", va=\"center\", c=\"black\")\n        ax.annotate(f\"$t_{{lag}} = {lag:.0f}$ s\", (lag, decile_lower), xytext=(12, 0), textcoords=\"offset points\", ha=\"left\", va=\"center\")\n        ax.annotate(f\"$t_{{steady state}} = {ss_s - lag:.0f}$ s\", (lag + (ss_s - lag)/4, decile_upper), xytext=(0, -12), textcoords=\"offset points\", ha=\"center\")\n\n    # Velocity\n    if show_velocity:\n        # Show a velocity sparkline over the plot\n        velocity = data.transform({y: \"diff\", x: lambda x: x}).rolling(5).mean()\n        velocity[y] = velocity[y]\n        # velocity_ax = ax.secondary_yaxis(location=\"right\", functions=(lambda x: pd.Series(x).rolling(5).mean().values, lambda x: x))\n        velocity_ax = ax.twinx()\n        sns.lineplot(\n            data=velocity, \n            x=x, \n            y=y,\n            alpha=0.5,\n            ax=velocity_ax\n        )\n        velocity_ax.set_ylabel(\"$V (u/s)$\")\n        velocity_ax.set_ylim((0, velocity[y].max()*2))\n\n    ax.set_ylim(ax_ylim)","visibility":"show","key":"omqqQXobl1"},{"type":"output","id":"MGI0kxkrQ3z3tqtWedTMM","data":[],"visibility":"show","key":"BxU5dEcFoP"}],"visibility":"show","key":"XegWRRHjbH"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"kinetics = kinetic_analysis(data=data_concentration, data_column=\"Data\", time_cutoff=15000)\n\ng = sns.FacetGrid(kinetics, col=\"Well\", col_wrap=2, sharey=False, height=4, aspect=1.5)\ng.map_dataframe(plot_kinetics, y=\"Data\", show_fit=True, show_velocity=False, annotate=True)","key":"a8y6iv4hdc"},{"type":"output","id":"d83tsfSpK24H6_EkZuNhg","data":[{"name":"stderr","output_type":"stream","text":"/var/folders/y7/lv9_64cd1s7b1d8nnnmcrq640000gn/T/ipykernel_23057/2041100202.py:72: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  .apply(\n"},{"output_type":"execute_result","execution_count":13,"metadata":{},"data":{"text/plain":{"content":"<seaborn.axisgrid.FacetGrid at 0x327a58ad0>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"2761e62d1bc4a98fa3bda74ad3cf0f61","path":"/2761e62d1bc4a98fa3bda74ad3cf0f61.png"},"text/plain":{"content":"<Figure size 1200x1600 with 7 Axes>","content_type":"text/plain"}}}],"key":"U5wOpnzETX"}],"key":"ZTmbdn6l8M"}],"key":"KSjpDvxOBN"},"references":{"cite":{"order":[],"data":{}}}}