{"kind":"Notebook","sha256":"10680f846e81ad919744940242ad1cd6cee35d6c2f62ab5168ab548f8851c3fa","slug":"kinetic-analysis-nb","location":"/kinetic-analysis-nb.ipynb","dependencies":[],"frontmatter":{"title":"Kinetic analysis notebook","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"python3 (default)","language":"python"},"exports":[{"format":"ipynb","filename":"kinetic-analysis-nb.ipynb","url":"/kinetic-analysis-nb-9aaa533cb917c1fb4b46b7836b22330f.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"import io\nimport re\nimport glob\nimport datetime\nimport warnings #useful for having cleaner outputs that get rolled into .md files\nfrom functools import partial\n\nimport numpy as np\nimport pandas as pd\nfrom scipy.optimize import curve_fit\n\n\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport seaborn as sns\n","key":"VQbnqfIDKu"},{"type":"output","id":"n8aXz7Ru0ONkf3InZeuu6","data":[],"key":"bRPBz1PO2D"}],"key":"ZFh3IT5gTp"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Load Platemap","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lZL7jbPscn"}],"identifier":"load-platemap","label":"Load Platemap","html_id":"load-platemap","implicit":true,"key":"OavbhE8S2X"}],"key":"W9CTO2E0fZ"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# These should be rolled into a library\n\ndef read_platemap_tsv(platemap_path: str) -> pd.DataFrame:\n    platemap = pd.read_table(platemap_path)\n\n    platemap[\"Row\"] = platemap[\"Well\"].apply(lambda s: re.search(r\"[A-Z]\", s).group())\n    platemap[\"Column\"] = platemap[\"Well\"].apply(lambda s: int(re.search(r\"\\d+\", s).group()))\n    platemap[\"Column\"] = platemap[\"Column\"].astype(int)\n\n    return platemap\n\ndef read_platemap_str(platemap_str: str) -> pd.DataFrame:\n    platemap = pd.read_table(io.StringIO(platemap_str), index_col=0)\n    print(platemap)\n    platemap.index.name = \"Row\"\n    platemap = platemap.reset_index().melt(id_vars=[\"Row\"], var_name=\"Column\", value_name=\"Construct\")\n    \n    platemap[\"Column\"] = platemap[\"Column\"].astype(int)\n    platemap[\"Well\"] = platemap.apply(lambda well: f\"{well['Row']}:{well['Column']}\", axis=1)\n    platemap = platemap.rename(columns={\"Construct\": \"Label\"})\n    platemap = platemap.dropna()\n    return platemap\n\ndef read_platemap_excel(platemap_path: str) -> pd.DataFrame:\n    \"\"\"\n    Use like this:\n\n    \n    > platemap_path = \"bnext/experiments/20240703-PURE-pT7deGFP-tetR-lacI/20240703-PURE-validate-pT7-deGFP-tetR-lacI.xlsx\"\n    > platemap = read_platemap_excel(platemap_path)\n    > platemap.head()\n    \"\"\"\n    platemap = pd.read_excel(platemap_path)\n    platemap.fillna(value=0, inplace=True)\n    platemap['Row'] = platemap['Well'].apply(lambda s: s.split(\":\")[0])\n    platemap['Column'] = platemap['Well'].apply(lambda s: s.split(\":\")[1]).astype(int)\n\n    return platemap","key":"MvBlagnrZS"},{"type":"output","id":"HghKKv7yJE-YPBht9ajOZ","data":[],"key":"QHb6T6Cn9i"}],"key":"LTbFxbeXa9"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# LOAD YOUR PLATEMAP HERE\"\nplatemap_path = \"./sample-data/platemap.txt\"\nplatemap = read_platemap_tsv(platemap_path)\n\n# for cleaner visualization\nplatemap.set_index('Well', drop=True, inplace=False)","identifier":"pd:platemap-code","enumerator":"1","html_id":"pd-platemap-code","key":"DRwkTlWyQe"},{"type":"output","id":"ihzAHvoYJNGpKbjQCFclB","data":[{"output_type":"execute_result","execution_count":143,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Experiment</th>\n      <th>Label</th>\n      <th>DNA Template</th>\n      <th>[DNA Template] (ng/uL)</th>\n      <th>Blank</th>\n      <th>Row</th>\n      <th>Column</th>\n    </tr>\n    <tr>\n      <th>Well</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>B1</th>\n      <td>DNA Concentration</td>\n      <td>GFP-100</td>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>100.0</td>\n      <td>NaN</td>\n      <td>B</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>B2</th>\n      <td>DNA Concentration</td>\n      <td>GFP-50</td>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>50.0</td>\n      <td>NaN</td>\n      <td>B</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>B3</th>\n      <td>DNA Concentration</td>\n      <td>GFP-20</td>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>20.0</td>\n      <td>NaN</td>\n      <td>B</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>B4</th>\n      <td>DNA Concentration</td>\n      <td>GFP-10</td>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>10.0</td>\n      <td>NaN</td>\n      <td>B</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>B5</th>\n      <td>DNA Concentration</td>\n      <td>GFP-5</td>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>5.0</td>\n      <td>NaN</td>\n      <td>B</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>B6</th>\n      <td>DNA Concentration</td>\n      <td>GFP-2</td>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>2.0</td>\n      <td>NaN</td>\n      <td>B</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>B7</th>\n      <td>DNA Concentration</td>\n      <td>GFP-1</td>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>B</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>B8</th>\n      <td>DNA Concentration</td>\n      <td>GFP-0</td>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>0.0</td>\n      <td>Y</td>\n      <td>B</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>C1</th>\n      <td>DNA Comparison</td>\n      <td>plamGFP (20240622)</td>\n      <td>pT7-lacO-plamGFP (20240622)</td>\n      <td>29.3</td>\n      <td>NaN</td>\n      <td>C</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>C2</th>\n      <td>DNA Comparison</td>\n      <td>plamGFP (20240626)</td>\n      <td>pT7-lacO-plamGFP (20240626)</td>\n      <td>35.8</td>\n      <td>NaN</td>\n      <td>C</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>C3</th>\n      <td>DNA Comparison</td>\n      <td>plamGFP (20240510)</td>\n      <td>pT7-lacO-plamGFP (20240510)</td>\n      <td>17.1</td>\n      <td>NaN</td>\n      <td>C</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>C4</th>\n      <td>DNA Comparison</td>\n      <td>plamGFP (20240622)</td>\n      <td>pT7-tetO-plamGFP (20240622)</td>\n      <td>72.7</td>\n      <td>NaN</td>\n      <td>C</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>C5</th>\n      <td>DNA Comparison</td>\n      <td>plamGFP (20240626)</td>\n      <td>pT7-tetO-plamGFP (20240626)</td>\n      <td>46.4</td>\n      <td>NaN</td>\n      <td>C</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>C6</th>\n      <td>DNA Comparison</td>\n      <td>plamGFP (20240510)</td>\n      <td>pT7-tetO-plamGFP (20240510)</td>\n      <td>12.3</td>\n      <td>NaN</td>\n      <td>C</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>C7</th>\n      <td>DNA Comparison</td>\n      <td>deGFP 1</td>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>178.5</td>\n      <td>NaN</td>\n      <td>C</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>C8</th>\n      <td>DNA Comparison</td>\n      <td>deGFP 2</td>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>178.5</td>\n      <td>NaN</td>\n      <td>C</td>\n      <td>8</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"},"text/plain":{"content":"             Experiment               Label                 DNA Template  \\\nWell                                                                       \nB1    DNA Concentration             GFP-100            pT7-deGFP (AR-11)   \nB2    DNA Concentration              GFP-50            pT7-deGFP (AR-11)   \nB3    DNA Concentration              GFP-20            pT7-deGFP (AR-11)   \nB4    DNA Concentration              GFP-10            pT7-deGFP (AR-11)   \nB5    DNA Concentration               GFP-5            pT7-deGFP (AR-11)   \nB6    DNA Concentration               GFP-2            pT7-deGFP (AR-11)   \nB7    DNA Concentration               GFP-1            pT7-deGFP (AR-11)   \nB8    DNA Concentration               GFP-0            pT7-deGFP (AR-11)   \nC1       DNA Comparison  plamGFP (20240622)  pT7-lacO-plamGFP (20240622)   \nC2       DNA Comparison  plamGFP (20240626)  pT7-lacO-plamGFP (20240626)   \nC3       DNA Comparison  plamGFP (20240510)  pT7-lacO-plamGFP (20240510)   \nC4       DNA Comparison  plamGFP (20240622)  pT7-tetO-plamGFP (20240622)   \nC5       DNA Comparison  plamGFP (20240626)  pT7-tetO-plamGFP (20240626)   \nC6       DNA Comparison  plamGFP (20240510)  pT7-tetO-plamGFP (20240510)   \nC7       DNA Comparison             deGFP 1            pT7-deGFP (AR-11)   \nC8       DNA Comparison             deGFP 2            pT7-deGFP (AR-11)   \n\n      [DNA Template] (ng/uL) Blank Row  Column  \nWell                                            \nB1                     100.0   NaN   B       1  \nB2                      50.0   NaN   B       2  \nB3                      20.0   NaN   B       3  \nB4                      10.0   NaN   B       4  \nB5                       5.0   NaN   B       5  \nB6                       2.0   NaN   B       6  \nB7                       1.0   NaN   B       7  \nB8                       0.0     Y   B       8  \nC1                      29.3   NaN   C       1  \nC2                      35.8   NaN   C       2  \nC3                      17.1   NaN   C       3  \nC4                      72.7   NaN   C       4  \nC5                      46.4   NaN   C       5  \nC6                      12.3   NaN   C       6  \nC7                     178.5   NaN   C       7  \nC8                     178.5   NaN   C       8  ","content_type":"text/plain"}}}],"identifier":"pd:platemap-output","html_id":"pd-platemap-output","key":"p93jckLILE"}],"identifier":"pd:platemap","label":"pd:platemap","html_id":"pd-platemap","key":"ndozr61pK9"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Parse Data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LQtWboDETv"}],"identifier":"parse-data","label":"Parse Data","html_id":"parse-data","implicit":true,"key":"hgNYJVsHzg"}],"key":"NOZl9Ka4Oz"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Cytation","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xH3e9Limtk"}],"identifier":"cytation","label":"Cytation","html_id":"cytation","implicit":true,"key":"plhEJvciz4"}],"key":"iA9rKbPrC5"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# this should be in a library\nwarnings.filterwarnings(\"ignore\")\n\ndef read_cytation(\n    datafile: str,\n    platemap: pd.DataFrame, \n    sep: str =\"\\t\",\n    blanklabel: str = \"Blank\",\n) -> pd.DataFrame:\n    # read data file as long string\n    data = \"\"\n    with open(datafile, \"r\", encoding=\"latin1\") as file:\n        data = file.read()\n\n    # extract indices for Proc Details, Layout\n    procidx = re.search(r\"Procedure Details\", data)\n    layoutidx = re.search(r\"Layout\", data)\n    readidx = re.search(r\"^(Read\\s)?\\d+,\\d+\", data, re.MULTILINE)\n\n    # get header DataFrame\n    header = data[:procidx.start()]\n    header = pd.read_csv(\n        io.StringIO(header), \n        delimiter=sep, \n        header=0, names=[\"key\", \"value\"]\n    )\n\n    # get procedure DataFrame\n    procedure = data[procidx.end():layoutidx.start()]  \n    procedure = pd.read_csv(io.StringIO(procedure), skipinitialspace=True, names=range(4))\n    procedure = procedure.replace(np.nan, \"\")\n\n    # get Cytation plate map from datafile as DataFrame\n    layout = data[layoutidx.end():readidx.start()]\n    layout = pd.read_csv(io.StringIO(layout), index_col=False)\n    layout = layout.set_index(layout.columns[0])\n    layout.index.name = \"Row\"\n\n    # iterate over data string to find individual reads\n    reads = dict()\n    \n    sep = r\"(?:Read\\s\\d+:)?(?:\\s\\d{3},\\d{3}(?:\\[\\d\\])?)?\" + sep\n        \n    for readidx in re.finditer(r\"^(Read\\s)?\\d+,\\d+.*\\n\", data, re.MULTILINE):\n        # for each iteration, extract string from start idx to end icx\n        read = data[readidx.end():]\n        read = read[:re.search(r\"(^(Read\\s)?\\d+,\\d+|^Blank Read\\s\\d|Results|Max V|\\Z)\", read[1:], re.MULTILINE).start()]\n        read = pd.read_csv(io.StringIO(read), sep=sep, engine=\"python\")\n        reads[data[readidx.start():readidx.end()].strip()] = read\n\n    # create a DataFrame for each read and process, then concatenate into a large DataFrame\n    read_dataframes = list()\n    for name, r in reads.items():\n        # filter out Cytation calculated kinetic parameters, which are cool, but don't want rn\n        r = r[r.Time.str.contains(\"\\d:\\d{2}:\\d{2}\", regex=True)]\n        \n        # extract meaningful parameters from really big string\n        r = r.melt(id_vars=[\"Time\", \"T°\"], var_name=\"Well\", value_name=\"Data\")\n        r['Row'] = r['Well'].str.extract(r\"([A-Z]+)\")\n        r['Column'] = r['Well'].str.extract(r\"(\\d+)\").astype(int)\n        r['Data'] = r['Data'].replace(\"OVRFLW\", np.nan)\n        r['Data'] = r['Data'].astype(float)\n        r['Read'] = name\n        r['Ex'] = r['Read'].str.extract(r\"(\\d+),\\d+\").astype(int)\n        r['Em'] = r['Read'].str.extract(r\"\\d+,(\\d+)\").astype(int)\n        read_dataframes.append(r)\n\n    data = pd.concat(read_dataframes)\n\n    # add time column to data DataFrame\n    data['Time'] = pd.to_timedelta(data['Time']).astype('timedelta64[s]')\n    data['Seconds'] = data['Time'].map(lambda x: x.total_seconds())\n    data = data.merge(platemap, on=[\"Well\", \"Row\", \"Column\"])\n    data.rename(columns={\"Well_x\": \"Well\"}, inplace=True)\n    \n    # apply blanking, if blanklabel given\n    if blanklabel and blanklabel in data.columns:\n        blanks = data[data['Blank'].notna()].groupby([\"Experiment\", \"Read\", \"Time\"]).agg({\"Data\": \"mean\"}).reset_index()\n        data = data.merge(blanks, on=[\"Experiment\", \"Read\", \"Time\"], suffixes=(\"\", \"Blank\"), how=\"left\")\n        data['DataBlanked'] = data['Data'] - data['DataBlank']\n    \n    return data","key":"yXrSZ9Ju2Z"},{"type":"output","id":"45S9IecPDsQQg4Y9713YT","data":[],"key":"YC7l06eqVL"}],"key":"JVR4Za0zAw"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"data = read_cytation(\n    datafile=\"./sample-data/pure-dna-sweep.txt\",\n    platemap=platemap,\n)\n\ndata.head()\n","identifier":"pd:table-code","enumerator":"2","html_id":"pd-table-code","key":"lDuKYqjUuz"},{"type":"output","id":"CwBsIauhFO9Hy96aFK2oU","data":[{"output_type":"execute_result","execution_count":33,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Time</th>\n      <th>T°</th>\n      <th>Well</th>\n      <th>Data</th>\n      <th>Row</th>\n      <th>Column</th>\n      <th>Read</th>\n      <th>Ex</th>\n      <th>Em</th>\n      <th>Seconds</th>\n      <th>Experiment</th>\n      <th>Label</th>\n      <th>DNA Template</th>\n      <th>[DNA Template] (ng/uL)</th>\n      <th>Blank</th>\n      <th>DataBlank</th>\n      <th>DataBlanked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0 days 00:00:00</td>\n      <td>37.0</td>\n      <td>B1</td>\n      <td>289.0</td>\n      <td>B</td>\n      <td>1</td>\n      <td>490,520</td>\n      <td>490</td>\n      <td>520</td>\n      <td>0.0</td>\n      <td>DNA Concentration</td>\n      <td>GFP-100</td>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>100.0</td>\n      <td>NaN</td>\n      <td>258.0</td>\n      <td>31.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0 days 00:05:00</td>\n      <td>37.1</td>\n      <td>B1</td>\n      <td>312.0</td>\n      <td>B</td>\n      <td>1</td>\n      <td>490,520</td>\n      <td>490</td>\n      <td>520</td>\n      <td>300.0</td>\n      <td>DNA Concentration</td>\n      <td>GFP-100</td>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>100.0</td>\n      <td>NaN</td>\n      <td>247.0</td>\n      <td>65.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0 days 00:10:00</td>\n      <td>37.0</td>\n      <td>B1</td>\n      <td>449.0</td>\n      <td>B</td>\n      <td>1</td>\n      <td>490,520</td>\n      <td>490</td>\n      <td>520</td>\n      <td>600.0</td>\n      <td>DNA Concentration</td>\n      <td>GFP-100</td>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>100.0</td>\n      <td>NaN</td>\n      <td>253.0</td>\n      <td>196.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0 days 00:15:00</td>\n      <td>37.0</td>\n      <td>B1</td>\n      <td>982.0</td>\n      <td>B</td>\n      <td>1</td>\n      <td>490,520</td>\n      <td>490</td>\n      <td>520</td>\n      <td>900.0</td>\n      <td>DNA Concentration</td>\n      <td>GFP-100</td>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>100.0</td>\n      <td>NaN</td>\n      <td>246.0</td>\n      <td>736.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0 days 00:20:00</td>\n      <td>37.0</td>\n      <td>B1</td>\n      <td>1880.0</td>\n      <td>B</td>\n      <td>1</td>\n      <td>490,520</td>\n      <td>490</td>\n      <td>520</td>\n      <td>1200.0</td>\n      <td>DNA Concentration</td>\n      <td>GFP-100</td>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>100.0</td>\n      <td>NaN</td>\n      <td>243.0</td>\n      <td>1637.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"},"text/plain":{"content":"             Time    T° Well    Data Row  Column     Read   Ex   Em  Seconds  \\\n0 0 days 00:00:00  37.0   B1   289.0   B       1  490,520  490  520      0.0   \n1 0 days 00:05:00  37.1   B1   312.0   B       1  490,520  490  520    300.0   \n2 0 days 00:10:00  37.0   B1   449.0   B       1  490,520  490  520    600.0   \n3 0 days 00:15:00  37.0   B1   982.0   B       1  490,520  490  520    900.0   \n4 0 days 00:20:00  37.0   B1  1880.0   B       1  490,520  490  520   1200.0   \n\n          Experiment    Label       DNA Template  [DNA Template] (ng/uL)  \\\n0  DNA Concentration  GFP-100  pT7-deGFP (AR-11)                   100.0   \n1  DNA Concentration  GFP-100  pT7-deGFP (AR-11)                   100.0   \n2  DNA Concentration  GFP-100  pT7-deGFP (AR-11)                   100.0   \n3  DNA Concentration  GFP-100  pT7-deGFP (AR-11)                   100.0   \n4  DNA Concentration  GFP-100  pT7-deGFP (AR-11)                   100.0   \n\n  Blank  DataBlank  DataBlanked  \n0   NaN      258.0         31.0  \n1   NaN      247.0         65.0  \n2   NaN      253.0        196.0  \n3   NaN      246.0        736.0  \n4   NaN      243.0       1637.0  ","content_type":"text/plain"}}}],"identifier":"pd:table-output","html_id":"pd-table-output","key":"PqnFBNr40g"}],"identifier":"pd:table","label":"pd:table","html_id":"pd-table","key":"gtn3q8d64e"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Analysis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"oxBhii2cr8"}],"identifier":"analysis","label":"Analysis","html_id":"analysis","implicit":true,"key":"HNML9cblco"}],"key":"trRCQra6jF"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Basic Plots","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EK8DMVyrk0"}],"identifier":"basic-plots","label":"Basic Plots","html_id":"basic-plots","implicit":true,"key":"p6t3pu42LE"},{"type":"heading","depth":4,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Plot all wells","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"LzrMboqkeA"}],"identifier":"plot-all-wells","label":"Plot all wells","html_id":"plot-all-wells","implicit":true,"key":"zkKOdRa7LW"}],"key":"F37bmUX7sy"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"plt = sns.relplot(\n    data=data,\n    x=\"Seconds\",\n    y=\"Data\",\n    hue=\"Well\",\n    row=\"Row\",\n    col=\"Column\",\n    kind=\"line\"\n);","identifier":"plt:expression-panel-code","enumerator":"3","html_id":"plt-expression-panel-code","key":"zSgbk7Hegq"},{"type":"output","id":"NKJvIHSSnvzB8FVWcEFfi","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"b2322ae5e73c1b7710017821874e54ad","path":"/b2322ae5e73c1b7710017821874e54ad.png"},"text/plain":{"content":"<Figure size 4068.62x1000 with 16 Axes>","content_type":"text/plain"}}}],"identifier":"plt:expression-panel-output","html_id":"plt-expression-panel-output","key":"oErEMEATP9"}],"identifier":"plt:expression-panel","label":"plt:expression-panel","html_id":"plt-expression-panel","key":"Sa0Jx8tK9B"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"DNA Concentration Sweep","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"MNlHwrqaos"}],"identifier":"dna-concentration-sweep","label":"DNA Concentration Sweep","html_id":"dna-concentration-sweep","implicit":true,"key":"OgV0lPtOS6"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Here, we just want to pull out the experiments corresponding to the DNA concentration experiment","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"j1nQy3iO3G"}],"key":"CwGom0Tv16"}],"key":"OCGmqhHfWz"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"data_concentration = data[data[\"Experiment\"] == \"DNA Concentration\"]","key":"iNsLl3lQ2W"},{"type":"output","id":"LqnXCilbHxJrggiBlmBzv","data":[],"key":"xUNiZIZRrM"}],"key":"f4IoCvi89B"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"g = sns.relplot(\n    data=data_concentration,\n    x=\"Seconds\",\n    y=\"DataBlanked\",\n    hue=\"[DNA Template] (ng/uL)\",\n    col=\"DNA Template\",\n    kind=\"line\",\n    height=5,\n    aspect=1\n)\ng.set_ylabels(\"Fluorescence (RFU)\")\ng.set_xlabels(\"Time [sec]\")\n\nfor ax in g.axes.flat:\n    ax.spines['top'].set_visible(True)   # Show top frame\n    ax.spines['right'].set_visible(True) # Show right frame\n    ax.spines['left'].set_visible(True)  # Ensure left frame is visible\n    ax.spines['bottom'].set_visible(True)\n;\n\n","identifier":"plt:expression-kinetics-simple-code","enumerator":"4","html_id":"plt-expression-kinetics-simple-code","key":"JV34StuhGR"},{"type":"output","id":"Trc2uBt1aP6yJ_yppsX-a","data":[{"output_type":"execute_result","execution_count":38,"metadata":{},"data":{"text/plain":{"content":"''","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"e5fe955bb6e061e2b48c85aaedef200b","path":"/e5fe955bb6e061e2b48c85aaedef200b.png"},"text/plain":{"content":"<Figure size 674.736x500 with 1 Axes>","content_type":"text/plain"}}}],"identifier":"plt:expression-kinetics-simple-output","html_id":"plt-expression-kinetics-simple-output","key":"xWx9SBHemN"}],"identifier":"plt:expression-kinetics-simple","label":"plt:expression-kinetics-simple","html_id":"plt-expression-kinetics-simple","key":"g5agYpFgVm"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Kinetics","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"aIPu71LBwD"}],"identifier":"kinetics","label":"Kinetics","html_id":"kinetics","implicit":true,"key":"Lrz770l7Fw"}],"key":"KmU4e0iRCx"},{"type":"block","kind":"notebook-code","data":{"editable":true,"slideshow":{"slide_type":""},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"def sigmoid(x, L, k, x0):\n    return (L / (1 + np.exp(-k*(x-x0))))\n\ndef kinetic_analysis_per_well(\n    data: pd.DataFrame, \n    data_column=\"Data\"\n) -> pd.DataFrame:\n    \n    # make initial guesses for parameters\n    L_initial = np.max(data[data_column])\n    x0_initial = np.max(data[\"Seconds\"]) / 4\n    k_initial = (np.log(L_initial * 1.1 / data[data_column] - 1) / (data[\"Seconds\"] - x0_initial)).dropna().mean() * -1.0\n    p0 = [L_initial, k_initial, x0_initial]\n\n    # attempt fitting\n    try:\n        params, _ = curve_fit(sigmoid, data[\"Seconds\"], data[data_column], p0=p0)\n\n        # Get the fitted curve\n        x_fit = data[\"Seconds\"]\n        y_fit = sigmoid(x_fit, *params)\n\n        # calculate velocities and velocity params\n        v = data[data_column].diff(3) / data[\"Seconds\"].diff(3)\n        maxV = v.max()\n        maxV_d = data.loc[v.idxmax(), data_column]\n        maxV_s = data.loc[v.idxmax(), \"Seconds\"]\n\n        # calculate lag time\n        lag = -maxV_d / maxV + maxV_s\n\n        decile_upper = data[data_column].quantile(0.95)\n        decile_lower = data[data_column].quantile(0.05)\n\n        growth_s = (decile_upper - maxV_d) / maxV + maxV_s\n\n        ss_s = data.loc[(data[data_column] > decile_upper).idxmax(), \"Seconds\"]\n        ss_d = data.loc[(data[data_column] > decile_upper).idxmax():, data_column].mean()\n\n        kinetics = {\n            f\"{data_column}_fit_d\": y_fit,\n            f\"{data_column}_maxV\": maxV,\n            f\"{data_column}_maxV_s\": maxV_s,\n            f\"{data_column}_maxV_d\": maxV_d,\n            f\"{data_column}_lag_s\": lag,\n            f\"{data_column}_growth_s\": growth_s,\n            f\"{data_column}_ss_s\": ss_s,\n            f\"{data_column}_ss_d\": ss_d,\n            f\"{data_column}_low_d\": decile_lower,\n            f\"{data_column}_high_d\": decile_upper,\n        }\n\n        return pd.concat([data, pd.DataFrame(kinetics)], axis=1) \n        # return kinetics\n\n    # if Exception raised, exit gracefully(ish)\n    except Exception as e:\n        print(f\"Failed to solve:\")\n        print(e)\n        \n        return None\n\ndef kinetic_analysis(\n    data: pd.DataFrame, \n    data_column=\"Data\",\n    time_cutoff: int = 12000\n) -> pd.DataFrame:\n    \n    tk = (\n        data[(data[\"Seconds\"] < time_cutoff) & (data[\"Blank\"].isna())]\n        .groupby([\"Well\"])\n        .apply(\n            partial(kinetic_analysis_per_well, data_column=data_column)\n        )\n        .reset_index(drop=True)\n    )\n    return tk\n\ndef kinetic_analysis_summary(\n    data: pd.DataFrame,\n    data_column=\"Data\",\n    time_cutoff: int = 12000,\n    label_order: list[str] = None,\n):\n    def per_well_cleanup(df):\n        cols = df.columns\n        return df[[\"Well\"] + list(cols[27:])].aggregate(lambda x: x.iloc[0])\n        \n    tk = kinetic_analysis(data=data, data_column=data_column, time_cutoff=time_cutoff)\n    out = tk.groupby(\"Well\").apply(per_well_cleanup).reset_index(drop=True)\n\n    if label_order:\n        out = out.set_index(\"Well\").reindex(label_order).reset_index()\n    \n    return out\n\ndef plot_kinetics(\n    data: pd.DataFrame, \n    x: str =\"Seconds\", y: str =\"Data\", \n    show_fit: bool = False, show_velocity: bool = False, annotate: bool = False, \n    **kwargs\n):\n    \"\"\"\n    Typical usage:\n    \n    > tk = kinetic_analysis(data=data, data_column=\"BackgroundSubtracted\")\n    > g = sns.FacetGrid(tk, col=\"Well\", col_wrap=2, sharey=False, height=4, aspect=1.5)\n    > g.map_dataframe(plot_kinetics, show_fit=True, show_velocity=True)\n    \"\"\"\n    colors = sns.color_palette(\"Set2\")\n\n    summary = data.iloc[0]\n    \n    ax = sns.scatterplot(\n        data=data, \n        x=x, \n        y=y,\n        alpha=0.5\n    )\n\n    ax_ylim = ax.get_ylim() # Use this to run lines to bounds later, then restore them before returning.\n\n    if show_fit:\n        sns.lineplot(\n            data = data,\n            x = x,\n            y = y,\n            linestyle = \"--\",\n            c = \"red\",\n            alpha=0.5\n        )\n\n    # Max Velocity\n    maxV_x = np.linspace(data[x].min(), data[x].max(), 100)\n    maxV_y = summary[f\"{y}_maxV\"] * (maxV_x - summary[f\"{y}_maxV_s\"]) + summary[f\"{y}_maxV_d\"]\n\n    sns.lineplot(\n        x = maxV_x[(maxV_y > 0) & (maxV_y < data[y].max())],\n        y = maxV_y[(maxV_y > 0) & (maxV_y < data[y].max())],\n        linestyle=\"--\",\n        c=\"r\",\n        ax=ax\n    )\n\n    maxV = summary[f\"{y}_maxV\"]\n    maxV_s = summary[f\"{y}_maxV_s\"]\n    maxV_d = summary[f\"{y}_maxV_d\"]\n\n    # Lag Time\n    lag = summary[f\"{y}_lag_s\"]\n    decile_upper = summary[f\"{y}_high_d\"]\n    decile_lower = summary[f\"{y}_low_d\"]\n    ax.vlines(lag, ymin=ax_ylim[0], ymax=decile_lower, colors=colors[2], linestyle=\"--\")\n\n    # Time to Steady State\n    ss_s = summary[f\"{y}_ss_s\"]\n    ax.axvline(ss_s, c=colors[3], linestyle=\"--\")\n\n    # Range\n    ax.axhline(decile_upper, c=colors[7], linestyle=\"--\")\n    ax.axhline(decile_lower, c=colors[7], linestyle=\"--\")\n\n    if annotate:\n        # Plot the text annotations on the chart\n        ax.annotate(f\"$V_{{max}} = {maxV:.2f} u/s$\", (maxV_s, maxV_d), xytext=(24,0), textcoords=\"offset points\", arrowprops={\"arrowstyle\": \"->\"}, ha=\"left\", va=\"center\", c=\"black\")\n        ax.annotate(f\"$t_{{lag}} = {lag:.0f}$ s\", (lag, decile_lower), xytext=(12, 0), textcoords=\"offset points\", ha=\"left\", va=\"center\")\n        ax.annotate(f\"$t_{{steady state}} = {ss_s - lag:.0f}$ s\", (lag + (ss_s - lag)/4, decile_upper), xytext=(0, -12), textcoords=\"offset points\", ha=\"center\")\n\n    # Velocity\n    if show_velocity:\n        # Show a velocity sparkline over the plot\n        velocity = data.transform({y: \"diff\", x: lambda x: x}).rolling(5).mean()\n        velocity[y] = velocity[y]\n        # velocity_ax = ax.secondary_yaxis(location=\"right\", functions=(lambda x: pd.Series(x).rolling(5).mean().values, lambda x: x))\n        velocity_ax = ax.twinx()\n        sns.lineplot(\n            data=velocity, \n            x=x, \n            y=y,\n            alpha=0.5,\n            ax=velocity_ax\n        )\n        velocity_ax.set_ylabel(\"$V (u/s)$\")\n        velocity_ax.set_ylim((0, velocity[y].max()*2))\n\n    ax.set_ylim(ax_ylim)","visibility":"show","key":"AKh6RTFKZX"},{"type":"output","id":"3vtPpW-2JiCerOeASS-FM","data":[],"visibility":"show","key":"NpZ9r3vMzq"}],"visibility":"show","key":"OZZ6z1M935"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"warnings.filterwarnings(\"ignore\")\n\nkinetics = kinetic_analysis(data=data_concentration, data_column=\"Data\", time_cutoff=15000)\n\ng = sns.FacetGrid(kinetics, col=\"Well\", col_wrap=2, sharey=False, height=4, aspect=1.5)\ng.map_dataframe(plot_kinetics, y=\"Data\", show_fit=True, show_velocity=False, annotate=True)","key":"ga1BZvEjWf"},{"type":"output","id":"HhV43yZE1YYh2U57pmpIr","data":[{"output_type":"execute_result","execution_count":47,"metadata":{},"data":{"text/plain":{"content":"<seaborn.axisgrid.FacetGrid at 0x13adf8aa0>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"0f2ba90ee951b3e9c983926b1c988306","path":"/0f2ba90ee951b3e9c983926b1c988306.png"},"text/plain":{"content":"<Figure size 1200x1600 with 7 Axes>","content_type":"text/plain"}}}],"key":"fEYo27q7oS"}],"key":"s5OgpLMDaY"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"warnings.filterwarnings(\"ignore\")\n\nsingle_well = data_concentration[data_concentration[\"Well\"] == \"B1\"]\n\nsingle_well_kinetics = kinetic_analysis(data=single_well, data_column=\"Data\", time_cutoff=15000)\ng = sns.FacetGrid(single_well_kinetics, col=\"Well\", col_wrap=2, sharey=False, height=4, aspect=1.5)\ng.map_dataframe(plot_kinetics, y=\"Data\", show_fit=True, show_velocity=False, annotate=True)\n\nplt.show()","identifier":"plt:single-kinetics-code","enumerator":"5","html_id":"plt-single-kinetics-code","key":"uZX3s0qalw"},{"type":"output","id":"jcJScCYDqX56uHnIiM-cH","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"08e566f25154e86450eee80180bdc854","path":"/08e566f25154e86450eee80180bdc854.png"},"text/plain":{"content":"<Figure size 1200x400 with 1 Axes>","content_type":"text/plain"}}}],"identifier":"plt:single-kinetics-output","html_id":"plt-single-kinetics-output","key":"s5ju9aZf5M"}],"identifier":"plt:single-kinetics","label":"plt:single-kinetics","html_id":"plt-single-kinetics","key":"EjcmVAKI1S"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"kinetic_parameters = [\"Data_lag_s\", \"Data_maxV\", \"Data_ss_d\"]\n\n# Dictionary to store well data\nwell_dict = {}\n\n# Process each well\nfor well in wells:\n    single = kinetics[kinetics['Well'] == well]\n    \n    # Create a dictionary for each well\n    well_dict[well] = {\n        param: single[param].iloc[0] if single[param].nunique() == 1 else 0 \n        for param in kinetic_parameters\n    }\n\n# Convert the well_dict into a DataFrame\nkinetic_params_extract = pd.DataFrame.from_dict(well_dict, orient='index').reset_index()\nkinetic_params_extract = kinetic_params_extract.rename(columns={'index': 'Well'})\n","key":"VDpTC2V0O4"},{"type":"output","id":"daypYD7Iley_OEaO4Ib0t","data":[{"output_type":"execute_result","execution_count":141,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Well</th>\n      <th>Data_lag_s</th>\n      <th>Data_maxV</th>\n      <th>Data_ss_d</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>B1</td>\n      <td>1313.877028</td>\n      <td>7.806667</td>\n      <td>50542.545455</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>B2</td>\n      <td>1374.062549</td>\n      <td>7.141111</td>\n      <td>46764.900000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>B3</td>\n      <td>1608.134739</td>\n      <td>4.848889</td>\n      <td>32897.666667</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>B4</td>\n      <td>1523.553719</td>\n      <td>3.226667</td>\n      <td>21991.125000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>B5</td>\n      <td>1738.834951</td>\n      <td>2.174444</td>\n      <td>15162.166667</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>B6</td>\n      <td>1542.550143</td>\n      <td>0.775556</td>\n      <td>5109.000000</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>B7</td>\n      <td>2107.566766</td>\n      <td>0.748889</td>\n      <td>4547.571429</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>B8</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"},"text/plain":{"content":"  Well   Data_lag_s  Data_maxV     Data_ss_d\n0   B1  1313.877028   7.806667  50542.545455\n1   B2  1374.062549   7.141111  46764.900000\n2   B3  1608.134739   4.848889  32897.666667\n3   B4  1523.553719   3.226667  21991.125000\n4   B5  1738.834951   2.174444  15162.166667\n5   B6  1542.550143   0.775556   5109.000000\n6   B7  2107.566766   0.748889   4547.571429\n7   B8     0.000000   0.000000      0.000000","content_type":"text/plain"}}}],"key":"ckeJo1Yd94"}],"key":"kidUb6wDNw"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"platemap_simple = platemap[platemap[\"Experiment\"]==\"DNA Concentration\"].drop(columns=['Experiment', 'Label','Blank', 'Row', 'Column'])\nmerged_df = pd.merge(platemap_simple, kinetic_params_extract, on='Well', how='inner')\n\n# for cleaner visualization\nmerged_df.set_index('Well', drop=True, inplace=False)","identifier":"pd:kinetics-code","enumerator":"6","html_id":"pd-kinetics-code","key":"uexOOWNy3Z"},{"type":"output","id":"_u7RK8GFeP9lcNrvu7DaE","data":[{"output_type":"execute_result","execution_count":147,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>DNA Template</th>\n      <th>[DNA Template] (ng/uL)</th>\n      <th>Data_lag_s</th>\n      <th>Data_maxV</th>\n      <th>Data_ss_d</th>\n    </tr>\n    <tr>\n      <th>Well</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>B1</th>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>100.0</td>\n      <td>1313.877028</td>\n      <td>7.806667</td>\n      <td>50542.545455</td>\n    </tr>\n    <tr>\n      <th>B2</th>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>50.0</td>\n      <td>1374.062549</td>\n      <td>7.141111</td>\n      <td>46764.900000</td>\n    </tr>\n    <tr>\n      <th>B3</th>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>20.0</td>\n      <td>1608.134739</td>\n      <td>4.848889</td>\n      <td>32897.666667</td>\n    </tr>\n    <tr>\n      <th>B4</th>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>10.0</td>\n      <td>1523.553719</td>\n      <td>3.226667</td>\n      <td>21991.125000</td>\n    </tr>\n    <tr>\n      <th>B5</th>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>5.0</td>\n      <td>1738.834951</td>\n      <td>2.174444</td>\n      <td>15162.166667</td>\n    </tr>\n    <tr>\n      <th>B6</th>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>2.0</td>\n      <td>1542.550143</td>\n      <td>0.775556</td>\n      <td>5109.000000</td>\n    </tr>\n    <tr>\n      <th>B7</th>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>1.0</td>\n      <td>2107.566766</td>\n      <td>0.748889</td>\n      <td>4547.571429</td>\n    </tr>\n    <tr>\n      <th>B8</th>\n      <td>pT7-deGFP (AR-11)</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"},"text/plain":{"content":"           DNA Template  [DNA Template] (ng/uL)   Data_lag_s  Data_maxV  \\\nWell                                                                      \nB1    pT7-deGFP (AR-11)                   100.0  1313.877028   7.806667   \nB2    pT7-deGFP (AR-11)                    50.0  1374.062549   7.141111   \nB3    pT7-deGFP (AR-11)                    20.0  1608.134739   4.848889   \nB4    pT7-deGFP (AR-11)                    10.0  1523.553719   3.226667   \nB5    pT7-deGFP (AR-11)                     5.0  1738.834951   2.174444   \nB6    pT7-deGFP (AR-11)                     2.0  1542.550143   0.775556   \nB7    pT7-deGFP (AR-11)                     1.0  2107.566766   0.748889   \nB8    pT7-deGFP (AR-11)                     0.0     0.000000   0.000000   \n\n         Data_ss_d  \nWell                \nB1    50542.545455  \nB2    46764.900000  \nB3    32897.666667  \nB4    21991.125000  \nB5    15162.166667  \nB6     5109.000000  \nB7     4547.571429  \nB8        0.000000  ","content_type":"text/plain"}}}],"identifier":"pd:kinetics-output","html_id":"pd-kinetics-output","key":"ahQLiW0cUq"}],"identifier":"pd:kinetics","label":"pd:kinetics","html_id":"pd-kinetics","key":"VrypaKqKPX"}],"key":"kO9DqNvLMt"},"references":{"cite":{"order":[],"data":{}}}}